// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package endpoint

import (
	"context"

	"server/db/pkg/service"
	kitendpoint "server/kit/endpoint"
)

// Endpoints collects all of the endpoints that compose a profile service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	AssetFind         kitendpoint.Endpoint
	AssetFindOne      kitendpoint.Endpoint
	AssetUpdateUpsert kitendpoint.Endpoint

	BuildFind      kitendpoint.Endpoint
	BuildFindOne   kitendpoint.Endpoint
	BuildInsertOne kitendpoint.Endpoint
	BuildUpdateOne kitendpoint.Endpoint

	CvatTaskFind      kitendpoint.Endpoint
	CvatTaskFindOne   kitendpoint.Endpoint
	CvatTaskInsertOne kitendpoint.Endpoint
	CvatTaskUpdateOne kitendpoint.Endpoint

	ProblemDelete       kitendpoint.Endpoint
	ProblemFind         kitendpoint.Endpoint
	ProblemFindOne      kitendpoint.Endpoint
	ProblemUpdateUpsert kitendpoint.Endpoint

	ModelDelete       kitendpoint.Endpoint
	ModelFind         kitendpoint.Endpoint
	ModelFindOne      kitendpoint.Endpoint
	ModelInsertOne    kitendpoint.Endpoint
	ModelUpdateOne    kitendpoint.Endpoint
	ModelUpdateUpsert kitendpoint.Endpoint
}

// New returns a Endpoints struct that wraps the provided service, and wires in all of the
// expected endpoint middlewares
func New(s service.DatabaseService /*, mdw map[string][]endpoint.Middleware*/) Endpoints {
	eps := Endpoints{
		AssetFind:         MakeAssetFindEndpoint(s),
		AssetFindOne:      MakeAssetFindOneEndpoint(s),
		AssetUpdateUpsert: MakeAssetUpdateUpsertEndpoint(s),

		BuildFind:      MakeBuildFindEndpoint(s),
		BuildFindOne:   MakeBuildFindOneEndpoint(s),
		BuildInsertOne: MakeBuildInsertOneEndpoint(s),
		BuildUpdateOne: MakeBuildUpdateOneEndpoint(s),

		CvatTaskFind:      MakeCvatTaskFindEndpoint(s),
		CvatTaskFindOne:   MakeCvatTaskFindOneEndpoint(s),
		CvatTaskInsertOne: MakeCvatTaskInsertOneEndpoint(s),
		CvatTaskUpdateOne: MakeCvatTaskUpdateOneEndpoint(s),

		ProblemDelete:       MakeProblemDeleteEndpoint(s),
		ProblemFind:         MakeProblemFindEndpoint(s),
		ProblemFindOne:      MakeProblemFindOneEndpoint(s),
		ProblemUpdateUpsert: MakeProblemUpdateUpsertEndpoint(s),

		ModelDelete:       MakeModelDeleteEndpoint(s),
		ModelFind:         MakeModelFindEndpoint(s),
		ModelFindOne:      MakeModelFindOneEndpoint(s),
		ModelInsertOne:    MakeModelInsertOneEndpoint(s),
		ModelUpdateOne:    MakeModelUpdateOneEndpoint(s),
		ModelUpdateUpsert: MakeModelUpdateUpsertEndpoint(s),
	}
	return eps
}

func MakeAssetFindEndpoint(s service.DatabaseService) kitendpoint.Endpoint {
	return func(ctx context.Context, req interface{}) chan kitendpoint.Response {
		returnChan := make(chan kitendpoint.Response)
		go func() {
			defer close(returnChan)
			resp := s.AssetFind(ctx, req.(service.AssetFindRequestData))
			returnChan <- kitendpoint.Response{
				Data:   resp,
				Err:    kitendpoint.Error{Code: 0},
				IsLast: true,
			}
		}()
		return returnChan
	}
}

func MakeAssetFindOneEndpoint(s service.DatabaseService) kitendpoint.Endpoint {
	return func(ctx context.Context, req interface{}) chan kitendpoint.Response {
		returnChan := make(chan kitendpoint.Response)
		go func() {
			defer close(returnChan)
			resp := s.AssetFindOne(ctx, req.(service.AssetFindOneRequestData))
			returnChan <- kitendpoint.Response{
				Data:   resp,
				Err:    kitendpoint.Error{Code: 0},
				IsLast: true,
			}
		}()
		return returnChan
	}
}

func MakeAssetUpdateUpsertEndpoint(s service.DatabaseService) kitendpoint.Endpoint {
	return func(ctx context.Context, req interface{}) chan kitendpoint.Response {
		returnChan := make(chan kitendpoint.Response)
		go func() {
			defer close(returnChan)
			resp := s.AssetUpdateUpsert(ctx, req.(service.AssetUpdateUpsertRequestData))
			returnChan <- kitendpoint.Response{
				Data:   resp,
				Err:    kitendpoint.Error{Code: 0},
				IsLast: true,
			}
		}()
		return returnChan
	}
}

func MakeBuildFindEndpoint(s service.DatabaseService) kitendpoint.Endpoint {
	return func(ctx context.Context, req interface{}) chan kitendpoint.Response {
		returnChan := make(chan kitendpoint.Response)
		go func() {
			defer close(returnChan)
			resp := s.BuildFind(ctx, req.(service.BuildFindRequestData))
			returnChan <- kitendpoint.Response{
				Data:   resp,
				Err:    kitendpoint.Error{Code: 0},
				IsLast: true,
			}
		}()
		return returnChan
	}
}

func MakeBuildFindOneEndpoint(s service.DatabaseService) kitendpoint.Endpoint {
	return func(ctx context.Context, req interface{}) chan kitendpoint.Response {
		returnChan := make(chan kitendpoint.Response)
		go func() {
			defer close(returnChan)
			resp := s.BuildFindOne(ctx, req.(service.BuildFindOneRequestData))
			returnChan <- kitendpoint.Response{
				Data:   resp,
				Err:    kitendpoint.Error{Code: 0},
				IsLast: true,
			}
		}()
		return returnChan
	}
}

func MakeBuildInsertOneEndpoint(s service.DatabaseService) kitendpoint.Endpoint {
	return func(ctx context.Context, req interface{}) chan kitendpoint.Response {
		returnChan := make(chan kitendpoint.Response)
		go func() {
			defer close(returnChan)
			resp := s.BuildInsertOne(ctx, req.(service.BuildInsertOneRequestData))
			returnChan <- kitendpoint.Response{
				Data:   resp,
				Err:    kitendpoint.Error{Code: 0},
				IsLast: true,
			}
		}()
		return returnChan
	}
}

func MakeBuildUpdateOneEndpoint(s service.DatabaseService) kitendpoint.Endpoint {
	return func(ctx context.Context, req interface{}) chan kitendpoint.Response {
		returnChan := make(chan kitendpoint.Response)
		go func() {
			defer close(returnChan)
			resp := s.BuildUpdateOne(ctx, req.(service.BuildUpdateOneRequestData))
			returnChan <- kitendpoint.Response{
				Data:   resp,
				Err:    kitendpoint.Error{Code: 0},
				IsLast: true,
			}
		}()
		return returnChan
	}
}

func MakeCvatTaskFindEndpoint(s service.DatabaseService) kitendpoint.Endpoint {
	return func(ctx context.Context, req interface{}) chan kitendpoint.Response {
		returnChan := make(chan kitendpoint.Response)
		go func() {
			defer close(returnChan)
			resp, err := s.CvatTaskFind(ctx, req.(service.CvatTaskFindRequestData))
			if err != nil {
				returnChan <- kitendpoint.Response{
					Data:   resp,
					Err:    kitendpoint.Error{Code: 1, Message: err.Error()},
					IsLast: true,
				}
			} else {
				returnChan <- kitendpoint.Response{
					Data:   resp,
					Err:    kitendpoint.Error{Code: 0},
					IsLast: true,
				}
			}
		}()
		return returnChan
	}
}

func MakeCvatTaskFindOneEndpoint(s service.DatabaseService) kitendpoint.Endpoint {
	return func(ctx context.Context, req interface{}) chan kitendpoint.Response {
		returnChan := make(chan kitendpoint.Response)
		go func() {
			defer close(returnChan)
			resp := s.CvatTaskFindOne(ctx, req.(service.CvatTaskFindOneRequestData))
			returnChan <- kitendpoint.Response{
				Data:   resp,
				Err:    kitendpoint.Error{Code: 0},
				IsLast: true,
			}
		}()
		return returnChan
	}
}
func MakeCvatTaskInsertOneEndpoint(s service.DatabaseService) kitendpoint.Endpoint {
	return func(ctx context.Context, req interface{}) chan kitendpoint.Response {
		returnChan := make(chan kitendpoint.Response)
		go func() {
			defer close(returnChan)
			resp := s.CvatTaskInsertOne(ctx, req.(service.CvatTaskInsertOneRequestData))
			returnChan <- kitendpoint.Response{
				Data:   resp,
				Err:    kitendpoint.Error{Code: 0},
				IsLast: true,
			}
		}()
		return returnChan
	}
}
func MakeCvatTaskUpdateOneEndpoint(s service.DatabaseService) kitendpoint.Endpoint {
	return func(ctx context.Context, req interface{}) chan kitendpoint.Response {
		returnChan := make(chan kitendpoint.Response)
		go func() {
			defer close(returnChan)
			resp := s.CvatTaskUpdateOne(ctx, req.(service.CvatTaskUpdateOneRequestData))
			returnChan <- kitendpoint.Response{
				Data:   resp,
				Err:    kitendpoint.Error{Code: 0},
				IsLast: true,
			}
		}()
		return returnChan
	}
}

func MakeProblemDeleteEndpoint(s service.DatabaseService) kitendpoint.Endpoint {
	return func(ctx context.Context, req interface{}) chan kitendpoint.Response {
		returnChan := make(chan kitendpoint.Response)
		go func() {
			defer close(returnChan)
			resp := s.ProblemDelete(ctx, req.(service.ProblemDeleteRequestData))
			returnChan <- kitendpoint.Response{
				Data:   resp,
				Err:    kitendpoint.Error{Code: 0},
				IsLast: true,
			}
		}()
		return returnChan
	}
}

func MakeProblemFindEndpoint(s service.DatabaseService) kitendpoint.Endpoint {
	return func(ctx context.Context, req interface{}) chan kitendpoint.Response {
		returnChan := make(chan kitendpoint.Response)
		go func() {
			defer close(returnChan)
			resp := s.ProblemFind(ctx, req.(service.ProblemFindRequestData))
			returnChan <- kitendpoint.Response{
				Data:   resp,
				Err:    kitendpoint.Error{Code: 0},
				IsLast: true,
			}
		}()
		return returnChan
	}
}

func MakeProblemFindOneEndpoint(s service.DatabaseService) kitendpoint.Endpoint {
	return func(ctx context.Context, req interface{}) chan kitendpoint.Response {
		returnChan := make(chan kitendpoint.Response)
		go func() {
			defer close(returnChan)
			resp, err := s.ProblemFindOne(ctx, req.(service.ProblemFindOneRequestData))
			if err != nil {
				returnChan <- kitendpoint.Response{
					Data:   nil,
					Err:    kitendpoint.Error{Code: 1, Message: err.Error()},
					IsLast: true,
				}
			}
			returnChan <- kitendpoint.Response{
				Data:   resp,
				Err:    kitendpoint.Error{Code: 0},
				IsLast: true,
			}
		}()
		return returnChan
	}
}

func MakeProblemUpdateUpsertEndpoint(s service.DatabaseService) kitendpoint.Endpoint {
	return func(ctx context.Context, req interface{}) chan kitendpoint.Response {
		returnChan := make(chan kitendpoint.Response)
		go func() {
			defer close(returnChan)
			resp := s.ProblemUpdateUpsert(ctx, req.(service.ProblemUpdateUpsertRequestData))
			returnChan <- kitendpoint.Response{
				Data:   resp,
				Err:    kitendpoint.Error{Code: 0},
				IsLast: true,
			}
		}()
		return returnChan
	}
}

func MakeModelDeleteEndpoint(s service.DatabaseService) kitendpoint.Endpoint {
	return func(ctx context.Context, req interface{}) chan kitendpoint.Response {
		returnChan := make(chan kitendpoint.Response)
		go func() {
			defer close(returnChan)
			resp := s.ModelDelete(ctx, req.(service.ModelDeleteRequestData))
			returnChan <- kitendpoint.Response{
				Data:   resp,
				Err:    kitendpoint.Error{Code: 0},
				IsLast: true,
			}
		}()
		return returnChan
	}
}

func MakeModelFindEndpoint(s service.DatabaseService) kitendpoint.Endpoint {
	return func(ctx context.Context, req interface{}) chan kitendpoint.Response {
		returnChan := make(chan kitendpoint.Response)
		go func() {
			defer close(returnChan)
			resp := s.ModelFind(ctx, req.(service.ModelFindRequestData))
			returnChan <- kitendpoint.Response{
				Data:   resp,
				Err:    kitendpoint.Error{Code: 0},
				IsLast: true,
			}
		}()
		return returnChan
	}
}

func MakeModelFindOneEndpoint(s service.DatabaseService) kitendpoint.Endpoint {
	return func(ctx context.Context, req interface{}) chan kitendpoint.Response {
		returnChan := make(chan kitendpoint.Response)
		go func() {
			defer close(returnChan)
			resp := s.ModelFindOne(ctx, req.(service.ModelFindOneRequestData))
			returnChan <- kitendpoint.Response{
				Data:   resp,
				Err:    kitendpoint.Error{Code: 0},
				IsLast: true,
			}
		}()
		return returnChan
	}
}

func MakeModelInsertOneEndpoint(s service.DatabaseService) kitendpoint.Endpoint {
	return func(ctx context.Context, req interface{}) chan kitendpoint.Response {
		returnChan := make(chan kitendpoint.Response)
		go func() {
			defer close(returnChan)
			resp, err := s.ModelInsertOne(ctx, req.(service.ModelInsertOneRequestData))
			if err != nil {
				returnChan <- kitendpoint.Response{
					Data:   resp,
					Err:    kitendpoint.Error{Code: 1, Message: err.Error()},
					IsLast: true,
				}
			} else {
				returnChan <- kitendpoint.Response{
					Data:   resp,
					Err:    kitendpoint.Error{Code: 0},
					IsLast: true,
				}
			}

		}()
		return returnChan
	}
}

func MakeModelUpdateOneEndpoint(s service.DatabaseService) kitendpoint.Endpoint {
	return func(ctx context.Context, req interface{}) chan kitendpoint.Response {
		returnChan := make(chan kitendpoint.Response)
		go func() {
			defer close(returnChan)
			resp := s.ModelUpdateOne(ctx, req.(service.ModelUpdateOneRequestData))
			returnChan <- kitendpoint.Response{
				Data:   resp,
				Err:    kitendpoint.Error{Code: 0},
				IsLast: true,
			}
		}()
		return returnChan
	}
}

func MakeModelUpdateUpsertEndpoint(s service.DatabaseService) kitendpoint.Endpoint {
	return func(ctx context.Context, req interface{}) chan kitendpoint.Response {
		returnChan := make(chan kitendpoint.Response)
		go func() {
			defer close(returnChan)
			resp := s.ModelUpdateUpsert(ctx, req.(service.ModelUpdateUpsertRequestData))
			returnChan <- kitendpoint.Response{
				Data:   resp,
				Err:    kitendpoint.Error{Code: 0},
				IsLast: true,
			}
		}()
		return returnChan
	}
}
